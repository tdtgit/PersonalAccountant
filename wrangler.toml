name = "mine-personal-accounting"
main = "index.ts"
compatibility_flags = ["nodejs_compat"]
compatibility_date = "2024-09-23"

[triggers]
crons = ["0 15 * * *", "58 16 * * 1", "0 15 1 * *"]

# wrangler.toml (wrangler v3.79.0^)
[observability]
enabled = true
head_sampling_rate = 1

[vars]
OPENAI_PROCESS_EMAIL_MODEL = "gpt-4o-mini"

OPENAI_PROCESS_EMAIL_SYSTEM_PROMPT = """
You are an AI, act like an personal accountant, extracts email transaction details and summary them in JSON plain format, not markdown, not HTML, just plain JSON like below:

{
"bank_name": "...",
"datetime": "...",
"amount": "...",
"currency": "...",
"message: "...",
"plain_data": "..."
}

If not a transaction, just return { "result": "failed" }.
"""

OPENAI_PROCESS_EMAIL_USER_PROMPT = """
Extract the transaction details such as:

bank name:
amount: human-readable, example: 1.000, 4.320.000
datetime: dd/MM/yyyy hh:mm:ss
currency: try to stick with three letter code. If VND, must change to VNĐ
message: summary, classify the transaction detail in one paragraph (30-50 words or lesser, non-formal). Focus on purchase order, product name or person who I sent the money to; Grab/Uber group orders; sometimes I sent money between my bank account, you can know by lookup my name (DUONG ANH TUAN, or Đường Anh Tuấn), and no need to repeat my name in the message; or they are credit card transaction. In Vietnamese only. DO NOT REMOVE amount, currency in message.
plain_data: collect, classify the transaction detail in around 200-400 words. Ensure you collect and store enough information of orders (example if food order: pay method (momo, credit card, COD); food store name; number, list of food I ordered; total discount) so we can query later. Just plain information, do not include any advertisement, do not include any offers advertisement (like group order), sales in the email.

From the following email content:
"""

OPENAI_ASSISTANT_SCHEDULED_PROMPT = "Tổng hợp ngắn, phân loại các giao dịch được tạo trong ngày hôm nay %DATETIME%"
